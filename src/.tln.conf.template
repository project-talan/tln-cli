/*
  tln.
    logger.
      trace()
      debug()
      info()
      warn()
      error()
      fatal()
      con()
    utils.
      wrap()
    os
    fs
    path
    script.
      cmd()
      if.
        then.
          cmd()
        else.
          cmd()
*/
module.exports = {
  version: '2',
  tags: async (tln) => [],
  options: async (tln) => {/*
    return {
      prefix: 'TLN_MY_COMPONENT',
      options: [
        { option: 'port', desc: 'Port to listen', type: 'string', default: '9080' } // env.TLN_MY_COMPONENT_PORT
      ]
    };
  */},
  env: async (tln, env) => {ENVS/*
    env.TLN_GIT_USER = 'john.doe';
    env.PATH = [tln.path.join(env.TLN_COMPONENT_HOME, 'bin'), env.PATH].join(tln.path.delimiter);
  */},
  dotenvs: async (tln) => [/*'.env'*/],
  files: async (tln) => [/*'version:TLN_VERSION'*/],
  inherits: async (tln) => [INHERITS/*'git'*/],
  depends: async (tln) => [DEPENDS/*'openjdk-11.0.2:linux'*/],
  steps: async (tln) => [
    'demo': {
      desc: 'Show service status',
      propagation: 'no',      // no(default) | up | down
      failOnStrErr: true,     // true(default) | false
      builder: async (tln) => ['params', 'filter', 'script']
    },
    'params': {
      require: ['TLN_MY_COMPONENT_PORT'],
      builder: async (tln) => [
        `echo Port to listen: ${tln.utils.wrap('TLN_MY_COMPONENT_PORT')}`
      ]}
    },
    'show-status:win32': {
      builder: async (tln) => [
        'echo Win32'
      ]}
    },
    'show-status:darwin': {
      builder: async (tln) => [
        'echo Darwin'
      ]}
    },
    'show-status:linux': {
      builder: async (tln) => [
        'echo Linux'
      ]}
    },
    'script': {
      builder: async (tln) => 
        tln.script
          .cmd('echo Network status')
          .if.eq(tln.os.platform(), 'win32')
          .then
            .cmd('ipconfig')
          .else
            .cmd('ifconfig')
          .cmd('---')
        ;
      }
    },
  ],
  components: async (tln) => [/*
    { id: 'sub-component',  ... }
  */]
}