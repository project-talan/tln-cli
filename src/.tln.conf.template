/*
  tln.
    logger.
      trace()
      debug()
      info()
      warn()
      error()
      fatal()
      con()
    utils.
      wrap()
    script.
      cmd()
      if.
        then.
          cmd()
        else.
          cmd()
*/
module.exports = {
  version: '2',
  /*detached: true, // false(defaut)*/
  tags: async (tln) => [],
  options: async (tln) => {/*
    return {
      prefix: 'TLN_MY_COMPONENT',
      options: [
        { option: 'port', desc: 'Port to listen', type: 'string', default: '9080' } // env.TLN_MY_COMPONENT_PORT
      ]
    };
  */},
  env: async (tln, env) => {ENVS/*
    env.TLN_GIT_USER = 'john.doe';
    env.PATH = [tln.path.join(env.TLN_COMPONENT_HOME, 'bin'), env.PATH].join(tln.path.delimiter);
  */},
  dotenvs: async (tln) => [/*'.env'*/],
  files: async (tln) => [/*'version:TLN_VERSION'*/],
  inherits: async (tln) => [INHERITS/*'git'*/],
  depends: async (tln) => [DEPENDS/*'openjdk-11.0.2', {id:'dotnet-sdk-3.1.410', filter:'win32'}*/],
  commands: async (tln) => ({
    'demo': {
      desc: 'Show service status',
      propagation: 'no',      // no(default) | up | down
      continueOnStderr: true, // false(default) | true
      builder: async (tln, env) => ['params', 'filter', 'script']
    },
    'params': {
      require: ['TLN_MY_COMPONENT_PORT'],
      builder: async (tln, env) => [
        `echo Port to listen: ${tln.utils.wrap('TLN_MY_COMPONENT_PORT')}`
      ]}
    },
    'show-status': [
      { filter: 'win32',
        builder: async (tln, env) => [
          'echo Win32'
        ]}},
      { filter: 'darwin',
        builder: async (tln, env) => [
          'echo Darwin'
        ]}},
      { filter: 'linux',
        builder: async (tln, env) => [
          'echo Linux'
        ]}}
    ],
    'script': {
      builder: async (tln, env) =>
        tln.script
          .cmd('echo Network status')
          .if(tln.os.isWindows())
          .then
            .cmd('ipconfig')
          .else
            .cmd('ifconfig')
          .cmd('---')
        ;
      }
    },
  }),
  diagrams: async (tln) => [/*
    tln.diagram.sequence().
      actor('Alice').
      actor('Bob').
      message('Alice', 'Bob', params, result),
    tln.diagram.components().
      component('Car').
        aggregates('GPS')
  */]
  components: async (tln) => ({/*
    'sub-component': {}
  */})
}