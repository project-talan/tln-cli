const request = require('request');
module.exports = {
  tags: (tln) => [],
  options: (tln, options) => {},
  dotenvs: (tln) => [],
  depends: (tln) => [],
  inherits: (tln) => [],
  variables: (tln, variables) => {
    variables
      .set('NODEJS_HOME', (tln, data) => data.env['COMPONENT_ORIGIN'])
      .prepend('PATH', (tln, data) => { 
        const suffix = (tln.getOsInfo().platform === 'win32')?'':`${data.sep}bin`;
        return `${data.env['COMPONENT_ORIGIN']}${suffix}`;
      });
  },
  steps: (tln) => [
    {
      id: 'init',
      filter: '',
      desc: '',
      script: (tln, script) => script.set([
        'npm i'
      ])
    },
    {
      id: 'build',
      filter: '',
      desc: '',
      script: (tln, script) => script.set([
      ])
    },
    {
      id: 'build-prod',
      filter: '',
      desc: '',
      script: (tln, script) => script.set([
      ])
    },
    {
      id: 'test',
      filter: '',
      desc: '',
      script: (tln, script) => script.set([
        'npm run jasmine && npm run coverage'
      ])
    },
    {
      id: 'serve',
      filter: '',
      desc: '',
      script: (tln, script) => script.set([
        'npm run serve'
      ])
    },
    {
      id: 'build-docker',
      filter: 'linux',
      desc: '',
      script: (tln, script) => script.set([
        '#rm -rf ./target || true',
        '#mkdir target',
        '#mkdir target/conf.d',
        '#if [ -d ./ssl ]',
        '#then',
        '#  envsubst ${COMPONENT_ID} ${COMPONENT_PARAM_HOST} > ./target/conf.d/default.conf < ./default.conf.https.template',
        '#  cp -r ./ssl ./target/',
        '#else',
        '#  envsubst ${COMPONENT_PARAM_HOST} > ./target/conf.d/default.conf < ./default.conf.template',
        '#fi',
        'docker build -t ${COMPONENT_ID}:${COMPONENT_VERSION} .'
      ])
    },
    {
      id: 'run-docker',
      filter: 'linux',
      desc: '',
      script: (tln, script) => script.set([
        'docker run -d --rm \\',
        ' -p $COMPONENT_PARAM_PORT:$COMPONENT_PARAM_PORT \\',
        ' -p $COMPONENT_PARAM_PORTS:$COMPONENT_PARAM_PORTS \\',
        '  --name ${COMPONENT_ID} ${COMPONENT_ID}:${COMPONENT_VERSION}'
      ])
    },
    {
      id: 'install',
      filter: '',
      desc: '',
      script: (tln, script) => {
        if (tln.utils.canInstallComponent(tln, script, 'nodejs')) {
          const id = script.env["COMPONENT_ID"];
          const version = id.split('-')[1];
          script.set(tln.utils.getDownloadScript(tln, {
              linux: {
                name: `node-v${version}-linux-x64.tar.gz`,
                opts: { src: `node-v${version}-linux-x64`, flt: `*`, dest: `.`, rmv: `node-v${version}-linux-x64` },
                url: `https://nodejs.org/dist/v${version}/node-v${version}-linux-x64.tar.gz`
              },
              darwin: {
                name: `node-v${version}-darwin-x64.tar.gz`,
                opts: { src: `node-v${version}-darwin-x64`, flt: `*`, dest: '.', rmv: `node-v${version}-darwin-x64` },
                url: `https://nodejs.org/dist/v${version}/node-v${version}-darwin-x64.tar.gz`
              },
              win32: {
                name: `node-v${version}-win-x64.zip`,
                opts: { src: `node-v${version}-win-x64`, flt: `*`, dest: `.`, rmv: `node-v${version}-win-x64` },
                url: `https://nodejs.org/dist/v${version}/node-v${version}-win-x64.zip`
              }
          }));
        }
      }
    }
  ],
  components: (tln) => { 
    /*/
    const url = 'https://nodejs.org/dist/index.json';
    const options = {json: true};
    request(url, options, (error, res, body) => {
      if (error) {
        return  console.log(error)
      };
      if (!error && res.statusCode == 200) {
        console.log(body.map( v => { return { id: 'node-' + v.version.substring(1) } }));
      };
    });
    /*/
    return [
      { id: 'node-13.5.0' },
      { id: 'node-13.4.0' },
      { id: 'node-13.3.0' },
      { id: 'node-13.2.0' },
      { id: 'node-13.1.0' },
      { id: 'node-13.0.1' },
      { id: 'node-13.0.0' },
      { id: 'node-12.16.1' },
      { id: 'node-12.14.1' },
      { id: 'node-12.14.0' },
      { id: 'node-12.13.1' },
      { id: 'node-12.13.0' },
      { id: 'node-12.12.0' },
      { id: 'node-12.11.1' },
      { id: 'node-12.11.0' },
      { id: 'node-12.10.0' },
      { id: 'node-12.9.1' },
      { id: 'node-12.9.0' },
      { id: 'node-12.8.1' },
      { id: 'node-12.8.0' },
      { id: 'node-12.7.0' },
      { id: 'node-12.6.0' },
      { id: 'node-12.5.0' },
      { id: 'node-12.4.0' },
      { id: 'node-12.3.1' },
      { id: 'node-12.3.0' },
      { id: 'node-12.2.0' },
      { id: 'node-12.1.0' },
      { id: 'node-12.0.0' },
      { id: 'node-11.15.0' },
      { id: 'node-11.14.0' },
      { id: 'node-11.13.0' },
      { id: 'node-11.12.0' },
      { id: 'node-11.11.0' },
      { id: 'node-11.10.1' },
      { id: 'node-11.10.0' },
      { id: 'node-11.9.0' },
      { id: 'node-11.8.0' },
      { id: 'node-11.7.0' },
      { id: 'node-11.6.0' },
      { id: 'node-11.5.0' },
      { id: 'node-11.4.0' },
      { id: 'node-11.3.0' },
      { id: 'node-11.2.0' },
      { id: 'node-11.1.0' },
      { id: 'node-11.0.0' },
      { id: 'node-10.18.0' }
    ];
  }
}
