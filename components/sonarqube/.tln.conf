const path = require('path');

const options = [
  {option: 'sonarqube-version',       env: 'TLN_SONARQUBE_VERSION',       desc: 'Sonarqube version',              default: 'sonarqube:6.7.7-community'},
  {option: 'sonarqube-db-version',    env: 'TLN_SONARQUBE_DB_VERSION',    desc: 'Database version',               default: 'mysql:5.7'},
  {option: 'sonarqube-db-name',       env: 'TLN_SONARQUBE_DB_NAME',       desc: 'Database name',                  default: 'sonar'},
  {option: 'sonarqube-db-root-pass',  env: 'TLN_SONARQUBE_DB_ROOT_PASS',  desc: 'Database root password',         default: null},
  {option: 'sonarqube-db-user',       env: 'TLN_SONARQUBE_DB_USER',       desc: 'Database sonar user',            default: 'sonar'},
  {option: 'sonarqube-db-pass',       env: 'TLN_SONARQUBE_DB_PASS',       desc: 'Database sonar user password',   default: null},
  {option: 'sonarqube-lang',          env: 'TLN_SONARQUBE_LANGUAGE',      desc: 'Language for sonar.properties',  default: null}
];

module.exports = {
  tags: async (tln) => [],
  options: async (tln) => options,
  dotenvs: async (tln) => [],
  inherits: async (tln) => [],
  depends: async (tln) => [],
  env: async (tln, env) => {},
  steps: async (tln) => [
    {
      id: 'up',
      filter: 'linux',
      desc: 'Run SonarQube server',
      builder: async (tln, script) => {
        if (tln.checkVariables(script.env, options.slice(0,options.length-1).map(o => o.env), options.slice(0,options.length-1).map(o => o.option))) {
          const src = path.join(__dirname, 'docker-compose.yml.template');
          const dest = path.join(script.env['TLN_COMPONENT_HOME'], 'docker-compose.yml');
          script.set([
            /* TODO: support sonar 7.9 without mysql
            `sysctl -w vm.max_map_count=262144`,
            `sysctl -w fs.file-max=65536`,
            `ulimit -n 65536`,
            `ulimit -u 4096`,
            */
            `envsubst < "${src}" > "${dest}"`,
            `docker-compose up -d`
          ])
        }
      }
    },
    {
      id: 'down',
      filter: 'linux',
      desc: 'Down SonarQube server',
      builder: async (tln, script) => {
        script.set([
          `docker-compose down --rmi all`
        ])
      }
    },
    {
      id: 'generate-properties',
      filter: '',
      builder: async (tln, script) => {
        const langs = [/*'cpp',*/ 'java', 'js', 'golang',/* 'python', 'php', */'ts'];
        if (script.env['SONARQUBE_LANGUAGE'] && langs.indexOf(script.env['SONARQUBE_LANGUAGE']) != -1) {
          tln.utils.copyTemplate(
            tln,
            script,
            path.join(__dirname, 'sonar-project.properties.template'),
            path.join(script.env['COMPONENT_HOME'], 'sonar-project.properties.template'),
            [path.join(__dirname, `${script.env['SONARQUBE_LANGUAGE']}.template`)]
          );
        } else {
          tln.logger.error('Please define language using --lang option, possible values: ' + langs.join(' | '));
        }
      }
    }

  ],
  components: async (tln) => []
}
