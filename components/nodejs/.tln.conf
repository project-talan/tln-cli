const path = require('path');

module.exports = {
  tags: async (tln) => [],
  options: async (tln) => [],
  env: async (tln, env) => {
    env.NODEJS_HOME = env.TLN_COMPONENT_HOME;
    const suffix = tln.isWindows() ? '' : 'bin';
    env.PATH = [path.join(env.TLN_COMPONENT_HOME, suffix), env.PATH].join(path.delimiter);
  },
  dotenvs: async (tln) => [],
  inherits: async (tln) => [],
  depends: async (tln) => [],
  steps: async (tln) => [
    {
      id: 'init',
      builder: async (tln, script) => script.set([
        'npm i'
      ])
    },
    {
      id: 'build',
      builder: async (tln, script) => script.set([
        'npm run build'
      ])
    },
    {
      id: 'test',
      builder: async (tln, script) => script.set([
        'npm run lint && npm run test'
      ])
    },
    {
      id: 'serve',
      builder: async (tln, script) => script.set([
        'npm run serve'
      ])
    },
    {
      id: 'docker-build',
      builder: async (tln, script) => script.set([
        'docker build -t ${TLN_COMPONENT_UID}:${TLN_COMPONENT_VERSION} .'
      ])
    },
    {
      id: 'docker-run',
      builder: async (tln, script) => script.set([
        'docker run -d --rm \\',
        ' -p $TLN_COMPONENT_PARAM_PORT:$TLN_COMPONENT_PARAM_PORT \\',
        ' -p $TLN_COMPONENT_PARAM_PORTS:$TLN_COMPONENT_PARAM_PORTS \\',
        '  --name ${TLN_COMPONENT_UID} ${TLN_COMPONENT_UID}:${TLN_COMPONENT_VERSION}'
      ])
    },
    {
      id: 'install',
      builder: async (tln, script) => {
        const id = script.env.TLN_COMPONENT_ID;
        const home = script.env.TLN_COMPONENT_HOME;
        const version = id.split('-')[1];
        if (version && tln.canInstallComponent(tln, id, home)) {
          script.set(tln.getDownloadScript(tln, {
            linux: {
              name: `node-v${version}-linux-x64.tar.gz`,
              opts: { src: `node-v${version}-linux-x64`, flt: `*`, dest: `.`, rmv: `node-v${version}-linux-x64` },
              url: `https://nodejs.org/dist/v${version}/node-v${version}-linux-x64.tar.gz`
            },
            darwin: {
              name: `node-v${version}-darwin-x64.tar.gz`,
              opts: { src: `node-v${version}-darwin-x64`, flt: `*`, dest: '.', rmv: `node-v${version}-darwin-x64` },
              url: `https://nodejs.org/dist/v${version}/node-v${version}-darwin-x64.tar.gz`
            },
            win32: {
              name: `node-v${version}-win-x64.zip`,
              opts: { src: `node-v${version}-win-x64`, flt: `*`, dest: `.`, rmv: `node-v${version}-win-x64` },
              url: `https://nodejs.org/dist/v${version}/node-v${version}-win-x64.zip`
            }
          }));
        }
      }
    }
  ],
  components: async (tln) => require('./components.js')
}