/*
*/
/*
$ sudo su
# service docker stop
# cd /var/lib/docker
# rm -rf *
# service docker start
# docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q) && docker rmi $(docker images -q) && docker system prune -af && docker volume prune -f
*/
module.exports = {
  tags: async (tln) => [],
  options: async (tln, args) => {
    args
      .prefix('TLN_DOCKER')
      .option('port', { describe: '', default: [], type: 'array' })
      .option('env-file', { describe: '', default: [], type: 'array' })
    ;
  },
  dotenvs: async (tln) => [],
  inherits: async (tln) => [],
  depends: async (tln) => [],
  env: async (tln, env) => {},
  steps: async (tln) => [
    {
      id: 'install',
      filter: 'linux',
      desc: '',
      builder: async (tln, script) => script.set([
        'sudo curl -fsSL https://get.docker.com | bash'
      ])
    },
    {
      id: 'cleanup-docker',
      filter: 'linux',
      desc: '',
      builder: async (tln, script) => script.set([
        'docker rm $(docker ps -a -q)',
        'docker rmi $(docker images | grep none | awk "{print $3}" | xargs)',
        'docker image prune'
      ])
    },
    {
      id: 'build-docker',
      builder: async (tln, script) => {
        script.set([`
docker build -t ${script.env.TLN_UID}:${script.env.TLN_VERSION} .
        `]);
        return true;
      }
    },
    {
      id: 'run-docker',
      builder: async (tln, script) => {
        const ports = script.env.TLN_DOCKER_PORT.map(v => '-p ' + v).join(' ');
        const envFiles = script.env.TLN_DOCKER_ENV_FILE.map(v => '--env-file ' + v).join(' ');
        script.set([`
docker run -d --rm ${ports} ${envFiles} --name ${script.env.TLN_UID} ${script.env.TLN_UID}:${script.env.TLN_VERSION}
        `]);
        return true;
      }
    },

    {
      id: 'save-docker',
      filter: 'linux',
      desc: '',
      builder: async (tln, script) => {
        script.set([
          'docker save -o ${TLN_COMPONENT_ID}-${TLN_VERSION}.tar ${TLN_COMPONENT_ID}:${TLN_VERSION}'
        ])
      }
    },
    {
      id: 'load-docker',
      filter: 'linux',
      desc: '',
      builder: async (tln, script) => script.set([
       'docker load -i ${TLN_COMPONENT_ID}-${TLN_VERSION}.tar'
      ])
    },
    {
      id: 'stop-docker',
      filter: 'linux',
      desc: '',
      builder: async (tln, script) => script.set([
        'docker stop ${TLN_COMPONENT_ID} || true',
        'docker rmi ${TLN_COMPONENT_ID}:${TLN_COMPONENT_VERSION} || true'
      ])
    }

  ],
  components: async (tln) => []
}
/*
sudo systemctl start docker
Enable Docker:

sudo systemctl enable docker
Check the status of the service with:

sudo systemctl status docker 0

*/