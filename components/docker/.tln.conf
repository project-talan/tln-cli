/*
*/
/*
$ sudo su
# service docker stop
# cd /var/lib/docker
# rm -rf *
# service docker start
# docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q) && docker rmi $(docker images -q) && docker system prune -af && docker volume prune -f
*/
module.exports = {
  tags: async (tln) => [],
  options: async (tln) => [],
  dotenvs: async (tln) => [],
  inherits: async (tln) => [],
  depends: async (tln) => [],
  env: async (tln, env) => {},
  steps: async (tln) => [
    {
      id: 'install',
      filter: 'linux',
      desc: '',
      builder: async (tln, script) => script.set([
        'sudo curl -fsSL https://get.docker.com | bash'
      ])
    },
    {
      id: 'cleanup-docker',
      filter: 'linux',
      desc: '',
      builder: async (tln, script) => script.set([
        'docker rm $(docker ps -a -q)',
        'docker rmi $(docker images | grep none | awk "{print $3}" | xargs)',
        'docker image prune'
      ])
    },
    {
      id: 'save-docker',
      filter: 'linux',
      desc: '',
      builder: async (tln, script) => {
        script.set([
          'docker save -o ${TLN_COMPONENT_ID}-${TLN_COMPONENT_VERSION}.tar ${TLN_COMPONENT_ID}:${TLN_COMPONENT_VERSION}'
        ])
      }
    },
    {
      id: 'load-docker',
      filter: 'linux',
      desc: '',
      builder: async (tln, script) => script.set([
       'docker load -i ${TLN_COMPONENT_ID}-${TLN_COMPONENT_VERSION}.tar'
      ])
    },
    {
      id: 'stop-docker',
      filter: 'linux',
      desc: '',
      builder: async (tln, script) => script.set([
        'docker stop ${TLN_COMPONENT_ID} || true',
        'docker rmi ${TLN_COMPONENT_ID}:${TLN_COMPONENT_VERSION} || true'
      ])
    }

  ],
  components: async (tln) => []
}