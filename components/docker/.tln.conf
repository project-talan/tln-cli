/*
*/
/*
$ sudo su
# service docker stop
# cd /var/lib/docker
# rm -rf *
# service docker start
# docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q) && docker rmi $(docker images -q) && docker system prune -af && docker volume prune -f
*/
function getIds(env) {
  return { uid: env.TLN_UID, tag: [env.TLN_UID, env.TLN_VERSION].join(':'), fileName: [env.TLN_UID, env.TLN_VERSION].join('-') };
}

module.exports = {
  tags: async (tln) => [],
  options: async (tln, args) => {
    args
      .prefix('TLN_DOCKER')
      .option('tty', { describe: '', default: false, type: 'boolean' })
      .option('rm', { describe: '', default: false, type: 'boolean' })
      .option('port', { describe: '', default: [], type: 'array' })
      .option('build-arg', { describe: '', default: [], type: 'array' })
      .option('env', { describe: '', default: [], type: 'array' })
      .option('env-file', { describe: '', default: [], type: 'array' })
      .option('registry', { describe: '', default: null, type: 'string' })
    ;
  },
  dotenvs: async (tln) => [],
  inherits: async (tln) => [],
  depends: async (tln) => [],
  env: async (tln, env) => {},
  steps: async (tln) => [
    {
      id: 'docker-install',
      filter: 'linux',
      desc: '',
      builder: async (tln, script) => script.set([
        'sudo curl -fsSL https://get.docker.com | bash'
      ])
    },
    {
      id: 'docker-cleanup',
      filter: 'linux',
      desc: '',
      builder: async (tln, script) => script.set([
        'docker rm $(docker ps -a -q)',
        'docker rmi $(docker images | grep none | awk "{print $3}" | xargs)',
        'docker image prune'
      ])
    },
    {
      id: 'docker-build',
      builder: async (tln, script) => {
        const { uid, tag } = getIds(script.env);

        const buildArgs = script.env.TLN_DOCKER_BUILD_ARG.map(v => ' --build-arg ' + v).join('');

        script.set([`
docker build${buildArgs} -t ${tag} .
        `]);
        return true;
      }
    },
    {
      id: 'docker-run',
      builder: async (tln, script) => {
        const { uid, tag } = getIds(script.env);

        const tty = script.env.TLN_DOCKER_TTY?' -it':' -d';
        const rm = script.env.TLN_DOCKER_RM?' --rm':'';
        const ports = script.env.TLN_DOCKER_PORT.map(v => ' -p ' + v).join('');
        const envs = script.env.TLN_DOCKER_ENV.map(v => ' --env ' + ['\'', v, '\''].join('')).join('');
        const envFiles = script.env.TLN_DOCKER_ENV_FILE.map(v => ' --env-file ' + v).join('');

        script.set([`
docker run${tty}${rm}${ports}${envFiles}${envs} --name ${uid} ${tag}
        `]);
        return true;
      }
    },
    {
      id: 'docker-tag',
      builder: async (tln, script) => {
        const { uid, tag } = getIds(script.env);

        const tag2 = [script.env.TLN_DOCKER_REGISTRY, tag].join('/');

        script.set([`
docker tag ${tag} ${tag2}
        `]);
        return true;
      }
    },

    {
      id: 'docker-save',
      filter: 'linux',
      desc: '',
      builder: async (tln, script) => {
        const { uid, tag, fileName } = getIds(script.env);

        script.set([
          'docker save -o ${fileName}.tar ${tag}'
        ])
      }
    },
    {
      id: 'docker-load',
      filter: 'linux',
      desc: '',
      builder: async (tln, script) => {
        const { uid, tag, fileName } = getIds(script.env);

        script.set([`
docker load -i ${fileName}.tar
        `]);
      }
    },
    {
      id: 'docker-stop',
      filter: 'linux',
      desc: '',
      builder: async (tln, script) => {
        const { uid, tag, fileName } = getIds(script.env);

        script.set([`
docker stop ${uid} || true
docker rmi ${tag} || true
        `]);
      }
    }

  ],
  components: async (tln) => []
}
/*
sudo systemctl start docker
Enable Docker:

sudo systemctl enable docker
Check the status of the service with:

sudo systemctl status docker 0

*/