const path = require('path');

const options = [
    {option: 'nexus-image', env: 'TLN_NEXUS_IMAGE', desc: 'Sonatype Mexus image', default: 'sonatype/nexus3'},
    {option: 'nexus-volume', env: 'TLN_NEXUS_VOLUME', desc: 'Path to location persistent storage', default: '/opt/nexus/nexus-data'}
  ];

module.exports = {
  tags: async (tln) => [],
  options: async (tln) => options,
  dotenvs: async (tln) => [],
  inherits: async (tln) => [],
  depends: async (tln) => [],
  env: async (tln, env) => {},
  steps: async (tln) => [
    {
      id: 'up',
      filter: 'linux',
      desc: 'Up Nexus server',
      builder: (tln, script) => {
        if (tln.checkVariables(script.env, options.map(o => o.env), options.map(o => o.option))) {
          const image = script.env.TLN_NEXUS_IMAGE;
          const volume = script.env.TLN_NEXUS_VOLUME;
          if (image && volume) {
            const secret = path.join(volume, 'admin.password');
            script.set([
              `mkdir -p ${volume} && chown -R 200 ${volume}`,
              `docker run --rm -d -p 8081:8081 --name sonatype-nexus -v ${volume}:/nexus-data ${image}`,
              `echo One-time password can be found here: ${secret}`,
              `echo`
            ]);
          }
        }
      }
    },
    {
      id: 'down',
      filter: 'linux',
      desc: 'Down Sonar server',
      builder: async (tln, script) => {
        script.set([
          `docker stop sonatype-nexus`
        ])
      }
    }
  ],
  components: async (tln) => []
}