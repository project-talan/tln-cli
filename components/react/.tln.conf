
module.exports = {
  tags: async (tln) => [],
  options: async (tln) => [
    {option: 'ssl-cert', env: 'TLN_SSL_CERT', desc: 'Include SSL certificates into docker images', default: false}
  ],
  dotenvs: async (tln) => [],
  inherits: async (tln) => [],
  depends: async (tln) => [],
  env: async (tln, env) => {},
  steps: async (tln) => [
    {
      id: 'init',
      script: async (tln, script) => script.set(['npm i'])
    },
    {
      id: 'build',
      script: async (tln, script) => script.set(['npm run build'])
    },
    {
      id: 'build-prod',
      script: async (tln, script) => script.set(['npm run build'])
    },
    {
      id: 'test',
      script: async (tln, script) => script.set(['npm run test'])
    },
    {
      id: 'serve',
      script: async (tln, script) => script.set(['npm run start'])
    },
    {
      id: 'docker-build',
      script: async (tln, script) => {
        let conf = ['envsubst "\\${TLN_COMPONENT_PARAM_HOST}" > ./target/conf.d/default.conf < ./default.conf.template'];
        if(script.env.TLN_SSL_CERT) {
          conf = [
            'envsubst "\\${TLN_COMPONENT_ID} \\${TLN_COMPONENT_PARAM_HOST}" > ./target/conf.d/default.conf < ./default.conf.https.template',
            'cp -r ./ssl ./target/'
          ];
        }

        script.set([
          'rm -rf ./target || true',
          'mkdir target',
          'mkdir target/conf.d'].
          concat(conf).
          concat([
            'docker build \\',
            '  -t ${COMPONENT_ID}:${COMPONENT_VERSION} .'
          ])
        )
      }
    },
    {
      id: 'docker-run',
      script: async (tln, script) => {}
    }
  ],
  components: async (tln) => []
}