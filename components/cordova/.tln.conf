const path = require('path');

module.exports = {
  tags: async (tln) => [],
  dotenvs: async (tln) => [],
  env: async (tln, env) => {
    env.CORDOVA_HOME = env.TLN_COMPONENT_HOME;
    env.PATH = [path.join(env.TLN_COMPONENT_HOME, 'node_modules', '.bin'), env.PATH].join(path.delimiter);
  },
  options: async (tln, args) => {
    args
      .prefix('TLN_CORDOVA')
      .option('platform', { describe: 'Platform to work with', default: null, type: 'string' });
  },
  inherits: async (tln) => [],
  depends: async (tln) => [],
  steps: async (tln) => [
    {
      id: 'install',
      desc: '',
      builder: async (tln, script) => {
        const id = script.env.TLN_COMPONENT_ID;
        const home = script.env.TLN_COMPONENT_HOME;
        const {name, version} = tln.unpackId(id);
        if (version && tln.canInstallComponent(tln, id, home)) {
          script.set([
            `npm install cordova@${version}`,
          ])
        }
      }
    },
    {
      id: 'cordova-add',
      desc: '',
      builder: async (tln, script) => {
        const platform = script.env.platform;
        if (platform) {
          script.set([
            `cordova platform add ${platform}`
          ]);
        } else {
          tln.logger.error(`Please define platform using --platform parameter`);
        }
      }
    }

  ],
  components: async (tln) => require('./components.js')
}