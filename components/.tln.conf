const path = require('path');

module.exports = {
  tags: async (tln) => [],
  options: async (tln, args) => {
    args
      .prefix('TLN')
      .option('service-type',        { describe: 'Service type: frontend, backend, db',        default: null, type: 'string' });
  },
  dotenvs: async (tln) => [],
  inherits: async (tln) => [],
  depends: async (tln) => [],
  env: async (tln, env) => {},
  steps: async (tln) => [
    {
      id: 'prereq',
      filter: 'linux',
      desc: '',
      builder: async (tln, script) => {
        script.set([
          'if [ -f ".env.template" ]; then envsubst > .env < .env.template; fi',
          'if [ -f "sonar-project.properties.template" ]; then envsubst > sonar-project.properties < sonar-project.properties.template; fi'
        ])
      }
    },
    {
      id: 'printenv',
      desc: '',
      filter: 'linux',
      builder: async (tln, script) => script.set(['printenv'])
    },
    {
      id: 'printenv',
      desc: '',
      filter: 'win32',
      builder: async (tln, script) => script.set(['set'])
    },
    {
      id: 'shell',
      desc: '',
      filter: 'linux',
      builder: async (tln, script) => script.set([
        `bash --rcfile <(cat ~/.bashrc; echo 'PS1="tln > "')`
      ])
    },
    {
      id: 'shell',
      desc: '',
      filter: 'win32',
      builder: async (tln, script) => script.set(['cmd'])
    },
    {
      id: 'generate-dotenv',
      filter: '',
      builder: async (tln, script) => {
        const home = script.env.TLN_COMPONENT_HOME;
        const types = ['frontend', 'backend', 'db'];
        const type = script.env.TLN_SERVICE_TYPE;
        if (type && types.indexOf(type) != -1) {
          tln.copyTemplate(
            tln,
            script,
            path.join(__dirname, '.env.template'),
            path.join(home, '.env.template'),
            [path.join(__dirname, `${type}.template`)]
          );
        }
      }
    }

  ],
  components: async (tln) => []
}