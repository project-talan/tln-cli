const path = require('path');


/*
tln install-packages -- --package "platform-tools" --package "platforms;android-29"
tln install-packages -- --package "build-tools;29.0.3"
*/

module.exports = {
  tags: async (tln) => [],
  dotenvs: async (tln) => [],
  options: async (tln, args) => {
    args
      .prefix('TLN_ANDROID_SDK')
      .option('package', { describe: 'SDK package id', default: [], type: 'array' });
  },
  env: async (tln, env) => {
    env.ANDROID_HOME = env.TLN_COMPONENT_HOME;
    env.ANDROID_SDK_ROOT = env.TLN_COMPONENT_HOME;
    env.PATH = [
      path.join(env.TLN_COMPONENT_HOME, 'tools'),
      path.join(env.TLN_COMPONENT_HOME, 'cmdline-tools', 'tools'),
      path.join(env.TLN_COMPONENT_HOME, 'cmdline-tools', 'tools', 'bin'),
      path.join(env.TLN_COMPONENT_HOME, 'platform-tools'),
      env.PATH
    ].join(path.delimiter);
  },
  inherits: async (tln) => [],
  depends: async (tln) => [],
  steps: async (tln) => [
    {
      id: 'install',
      filter: '',
      builder: async (tln, script) => {
        const id = script.env.TLN_COMPONENT_ID;
        const home = script.env.TLN_COMPONENT_HOME;
        const {name, version} = tln.unpackId(id);
        if (tln.canInstallComponent(tln, id, home)) {
          script.set(
            ['mkdir cmdline-tools && mkdir cmdline-tools\\tools'].concat(tln.getDownloadScript(tln, {
            'linux': {name: 'commandlinetools-linux-6200805_latest.zip', opts: null, url: 'https://dl.google.com/android/repository/commandlinetools-linux-6200805_latest.zip'},
            'darwin': {name: 'commandlinetools-mac-6200805_latest.zip', opts: null, url: 'https://dl.google.com/android/repository/commandlinetools-mac-6200805_latest.zip'},
            'win32': {
              name: 'commandlinetools-win-6200805_latest.zip',
              opts: { src: `tools`, flt: `*`, dest: `cmdline-tools/tools`, rmv: 'tools'},
              url: 'https://dl.google.com/android/repository/commandlinetools-win-6200805_latest.zip'}
          })));
        }
      }
    },
    {
      id: 'list-packages',
      filter: '',
      builder: async (tln, script) => script.set([
        'sdkmanager --list'
      ])
    },
    {
      id: 'install-packages',
      filter: '',
      builder: async (tln, script) => {
        if (script.env.TLN_ANDROID_SDK_PACKAGE.length) {
          let params = script.env.TLN_ANDROID_SDK_PACKAGE;
          if (typeof params == 'string') {
            params = [params];
          }
          const packages = params.map(v => `"${v}"`).join(' ');
          script.set([
            `echo y|sdkmanager ${packages}`
          ]);
        } else {
          tln.logger.error('List of packages to install was not defined, please use next format --package=platform-tools (use multiple --package parameters if needed)');
        }
      }
    },
    {
      id: 'update-packages',
      filter: '',
      builder: async (tln, script) => script.set([
        'sdkmanager --update'
      ])
    }
  ],
  components: async (tln) => []
}
