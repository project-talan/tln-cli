/*
tln update-packages
tln install-packages --package="platform-tools" --package="platforms;android-28" --package="build-tools;28.0.3"
tln install-packages --package="platform-tools" --package="platforms;android-29" --package="build-tools;29.0.2"

*/
module.exports = {
  tags: (tln) => [],
  options: (tln, options) => {
    options
      .add('package', 'TLN_ANDROID_SDK_PACKAGE', 'SDK package id', []);
  },
  dotenvs: (tln) => [],
  depends: (tln) => [],
  inherits: (tln) => [],
  variables: (tln, variables) => {
    variables
      .set('ANDROID_HOME', (tln, data) => data.env['COMPONENT_ORIGIN'])
      .set('ANDROID_SDK_ROOT', (tln, data) => data.env['COMPONENT_ORIGIN'])
      .append('PATH', (tln, data) => `${data.env['COMPONENT_ORIGIN']}${data.sep}tools`)
      .append('PATH', (tln, data) => `${data.env['COMPONENT_ORIGIN']}${data.sep}tools${data.sep}bin`)
      .append('PATH', (tln, data) => `${data.env['COMPONENT_ORIGIN']}${data.sep}platform-tools`);
  },
  steps: (tln) => [
    {
      id: 'install',
      filter: '',
      script: (tln, script) => {
        if (tln.utils.canInstallComponent(tln, script)) {
          script.set(tln.utils.getDownloadScript(tln, {
            'linux': {name: 'sdk-tools-linux-4333796.zip', opts: null, url: 'https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip'},
            'darwin': {name: 'sdk-tools-darwin-4333796.zip', opts: null, url: 'https://dl.google.com/android/repository/sdk-tools-darwin-4333796.zip'},
            'win32': {name: 'sdk-tools-windows-4333796.zip', opts: null, url: 'https://dl.google.com/android/repository/sdk-tools-windows-4333796.zip'}
          }));
        }
      }
    },
    {
      id: 'list-packages',
      filter: '',
      script: (tln, script) => script.set([
        'sdkmanager --list'
      ])
    },
    {
      id: 'install-packages',
      filter: '',
      script: (tln, script) => {
        if (script.env.TLN_ANDROID_SDK_PACKAGE.length) {
          let params = script.env.TLN_ANDROID_SDK_PACKAGE;
          if (typeof params == 'string') {
            params = [params];
          }
          const packages = params.map(v => `"${v}"`).join(' ');
          script.set([
            `sdkmanager ${packages}`
          ]);
        } else {
          context.logger.warn('List of packages to install was not defined, please use next format --package=platform-tools (use multiple --package parameters if needed)');
        }
      }
    },
    {
      id: 'update-packages',
      filter: '',
      script: (tln, script) => script.set([
        'sdkmanager --update'
      ])
    }
  ],
  components: (tln) => []
}