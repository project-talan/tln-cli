/* TODO: implement subtree commands
 *
 */
const path = require('path');
const fs = require('fs');

class Git {

  constructor(script) {
    this.script = script;
    this.subtreesFileName = '.gitsubtrees';
  }

  getErrorDesc(vars) {
    return vars.map(v => {
      return `${v}: ${this.script.env[v]}`
    }).join(', ');
  }

  clone() {
    const upstream = this.script.env.TLN_GIT_UPSTREAM;
    const user = this.script.env.TLN_GIT_USER;
    const email = this.script.env.TLN_GIT_EMAIL;
    if (upstream && user && email) {
      this.script.set([
        `git clone "${upstream}" .`,
        `git config --local user.name "${user}"`,
        `git config --local user.email "${email}"`
      ]);
    } else {
      this.script.logger.error(`One or more environmet variables were not defined: ${this.getErrorDesc(['TLN_GIT_UPSTREAM', 'TLN_GIT_USER', 'TLN_GIT_EMAIL'])}`);
    }
    return true;
  }

  fork() {
    const origin = this.script.env.TLN_GIT_ORIGIN;
    const upstream = this.script.env.TLN_GIT_UPSTREAM;
    const user = this.script.env.TLN_GIT_USER;
    const email = this.script.env.TLN_GIT_EMAIL;
    if (origin && upstream && user && email) {
      this.script.set([
      `git clone ${origin} .`,
      `git remote add upstream ${upstream}`,
      `git config --local user.name "${user}"`,
      `git config --local user.email "${email}"`
      ]);
    } else {
      this.script.logger.error(`One or more environmet variables were not defined: ${this.getErrorDesc(['TLN_GIT_ORIGIN', 'TLN_GIT_UPSTREAM', 'TLN_GIT_USER', 'TLN_GIT_EMAIL'])}`);
    }
    return true;
  }

  getSubtreesFileName(home) {
    return path.join(home, this.subtreesFileName);
  }

  loadSubtrees(home) {
    const fn = this.getSubtreesFileName(home);
    let r = [];
    if (fs.existsSync(fn)) {
      r = JSON.parse(fs.readFileSync(fn, 'utf8'));
    }
    return r;
  }

  saveSubtrees(home, subtrees) {
    fs.writeFileSync(this.getSubtreesFileName(home), JSON.stringify(subtrees, null, '  '));
  }

  lsSubtree() {
    const home = this.script.env.COMPONENT_HOME;
    //
    this.script.logger.con('Prefix'.padEnd(24), 'Origin'.padEnd(64), 'Ref');
    this.loadSubtrees(home).forEach(elem => this.script.logger.con(elem.prefix.padEnd(24), elem.origin.padEnd(64), elem.ref));
  }

  addSubtree() {
    const home = this.script.env.COMPONENT_HOME;
    const prefix = this.script.env.TLN_GIT_PREFIX;
    const origin = this.script.env.TLN_GIT_ORIGIN;
    const ref = this.script.env.TLN_GIT_REF;
    //
    let subtrees = this.loadSubtrees(home);
    let subtree = subtrees.find(elem => elem.prefix === prefix);
    if (subtree) {
      this.script.logger.error(`Subtree with prexix: ${prefix} and origin: ${origin} was already added`);
    } else {
      subtree = {
        prefix: prefix,
        origin: origin,
        ref: ref
      };
      subtrees.push(subtree);
      this.saveSubtrees(home, subtrees);
      this.script.set([
        `git add ${this.subtreesFileName}`,
        `git commit -m"New subtree with prefix: ${subtree.prefix} and origin: ${subtree.origin} was added"`,
        `git subtree add --prefix ${subtree.prefix} ${subtree.origin} ${subtree.ref} --squash`
      ]);
    }
  }

  pullSubtree() {
    const home = this.script.env.COMPONENT_HOME;
    const prefix = this.script.env.TLN_GIT_PREFIX;
    const ref = this.script.env.TLN_GIT_REF;
    //
    let subtrees = this.loadSubtrees(home);
    let subtree = subtrees.find(elem  => elem.prefix === prefix);
    if (subtree) {
      if (ref) {
        subtree.ref = ref;
      }
      this.saveSubtrees(home, subtrees);
      this.script.set([
        `git add ${this.subtreesFileName} || true`,
        `git commit -m"Update subtree with prefix: ${subtree.prefix} and origin: ${subtree.origin}" || true`,
        `git subtree pull --prefix ${subtree.prefix} ${subtree.origin} ${subtree.ref} --squash`
      ]);
    } else {
      this.script.logger.error(`Subtree with prefix '${prefix}' was not found`);
    }
  }

}

module.exports = {
  tags: async (tln) => [],
  options: async (tln, yargs) => {
    //yargs.option('c', { describe: 'Configuration to build', alias:'configuration', default: null, type: 'string' });
  },
  dotenvs: async (tln) => [],
  inherits: async (tln) => [],
  depends: async (tln) => [],
  env: async (tln, env) => {},
  steps: async (tln) => [
    {
      id: 'clone',
      desc: 'Clone git repository and configure user, example: tln git-clone --origin=git@github.com:org/proj.git --user=user --email=user@org.com',
      builder: async (tln, script) => (new Git(script)).clone()
    },
    {
      id: 'fork',
      desc: 'Clone git repository, add additional remote (upstream) and configure user, example: tln git-fork --origin=git@github.com:user/proj.git --upstream=git@github.com:org/proj.git --user=user --email=user@org.com',
      builder: async (tln, script) => (new Git(script)).fork()
    },
    {
      id: 'ls-subtree',
      desc: 'List registered subtrees, example: tln git-ls-subtree',
      builder: async (tln, script) => (new Git(script)).lsSubtree()
    },
    {
      id: 'add-subtree',
      desc: 'Add subtree to the project, example: tln git-add-subtree --origin=https://github.com/project-talan/tln-nodejs.git --prefix=services/api --ref=master',
      builder: async (tln, script) => (new Git(script)).addSubtree()
    },
    {
      id: 'pull-subtree',
      desc: 'Pull subtree, example: tln git-pull-subtree --prefix=services/api [--ref=master]',
    }
  ],
  components: async (tln) => []
}