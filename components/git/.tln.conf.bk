'use strict';

const path = require('path');
const fs = require('fs');

class Subtree {

  constructor() {
    this.subtreesFileName = '.gitsubtrees';
  }

  clone(script) {
    script.set([
      `git clone ${script.env.TLN_GIT_UPSTREAM} .`,
      `git config --local user.name "${script.env.TLN_GIT_USER}"`,
      `git config --local user.email "${script.env.TLN_GIT_EMAIL}"`
    ]);
    return true;
  }

  fork(script) {
    script.set([
      `git clone ${script.env.TLN_GIT_ORIGIN} .`,
      `git remote add upstream ${script.env.TLN_GIT_UPSTREAM}`,
      `git config --local user.name "${script.env.TLN_GIT_USER}"`,
      `git config --local user.email "${script.env.TLN_GIT_EMAIL}"`
    ]);
    return true;
  }

  getSubtreesFileName(home) {
    return path.join(home, this.subtreesFileName);
  }

  loadSubtrees(home) {
    const fn = this.getSubtreesFileName(home);
    let r = [];
    if (fs.existsSync(fn)) {
      r = JSON.parse(fs.readFileSync(fn, 'utf8'));
    }
    return r;
  }

  saveSubtrees(home, subtrees) {
    fs.writeFileSync(this.getSubtreesFileName(home), JSON.stringify(subtrees, null, '  '));
  }

  lsSubtree(script) {
    const home = script.env.COMPONENT_HOME;
    //
    script.logger.con('Prefix'.padEnd(24), 'Origin'.padEnd(64), 'Ref');
    this.loadSubtrees(home).forEach(elem => script.logger.con(elem.prefix.padEnd(24), elem.origin.padEnd(64), elem.ref));
  }

  addSubtree(script) {
    const home = script.env.COMPONENT_HOME;
    const prefix = script.env.TLN_GIT_PREFIX;
    const origin = script.env.TLN_GIT_ORIGIN;
    const ref = script.env.TLN_GIT_REF;
    //
    let subtrees = this.loadSubtrees(home);
    let subtree = subtrees.find(elem => elem.prefix === prefix);
    if (subtree) {
      script.logger.error(`Subtree with prexix: ${prefix} and origin: ${origin} was already added`);
    } else {
      subtree = {
        prefix: prefix,
        origin: origin,
        ref: ref
      };
      subtrees.push(subtree);
      this.saveSubtrees(home, subtrees);
      script.set([
        `git add ${this.subtreesFileName}`,
        `git commit -m"New subtree with prefix: ${subtree.prefix} and origin: ${subtree.origin} was added"`,
        `git subtree add --prefix ${subtree.prefix} ${subtree.origin} ${subtree.ref} --squash`
      ]);
    }
  }

  pullSubtree(script) {
    const home = script.env.COMPONENT_HOME;
    const prefix = script.env.TLN_GIT_PREFIX;
    const ref = script.env.TLN_GIT_REF;
    //
    let subtrees = this.loadSubtrees(home);
    let subtree = subtrees.find(elem  => elem.prefix === prefix);
    if (subtree) {
      if (ref) {
        subtree.ref = ref;
      }
      this.saveSubtrees(home, subtrees);
      script.set([
        `git add ${this.subtreesFileName} || true`,
        `git commit -m"Update subtree with prefix: ${subtree.prefix} and origin: ${subtree.origin}" || true`,
        `git subtree pull --prefix ${subtree.prefix} ${subtree.origin} ${subtree.ref} --squash`
      ]);
    } else {
      script.logger.error(`Subtree with prefix '${prefix}' was not found`);
    }
  }

}

module.exports = {
  Subtree,
  tags: (tln) => [],
  options: (tln, options) => {
    options
      .add('origin',   'TLN_GIT_ORIGIN',   'Origin url',               null)
      .add('upstream', 'TLN_GIT_UPSTREAM', 'Upstream remote url',      null)
      .add('ref',      'TLN_GIT_REF',      'Ref',                      null)
      .add('user',     'TLN_GIT_USER',     'User name',                null)
      .add('email',    'TLN_GIT_EMAIL',    'User email',               null)
      .add('prefix',   'TLN_GIT_PREFIX',   'Submodule/subtree prefix', null);
  },
  dotenvs: (tln) => [],
  depends: (tln) => [],
  inherits: (tln) => [],
  variables: (tln, variables) => {},
  steps: (tln) => [
    {
      id: 'git-clone',
      desc: '\
Clone git repository and configure user, \
example: tln git-clone --origin=git@github.com:org/proj.git --user=user --email=user@org.com',
      script: (tln, script) => (new Subtree).clone(script)
    },
    {
      id: 'git-fork',
      desc: '\
Clone git repository, add additional remote (upstream) and configure user, \
example: tln git-fork --origin=git@github.com:user/proj.git --upstream=git@github.com:org/proj.git --user=user --email=user@org.com',
      script: (tln, script) => (new Subtree).fork(script)
    },
    {
      id: 'git-ls-subtree',
      desc: '\
List registered subtrees, \
example: tln git-subtree-ls',
      script: (tln, script) => (new Subtree).lsSubtree(script)
    },
    {
      id: 'git-add-subtree',
      desc: '\
Add subtree to the project, \
example: tln git-subtree-add --origin=https://github.com/project-talan/tln-nodejs.git --prefix=services/api --ref=master',
      script: (tln, script) => (new Subtree).addSubtree(script)
    },
    {
      id: 'git-pull-subtree',
      desc: '\
Pull subtree, \
example: tln git-subtree-pull --prefix=services/api [--ref=master]',
      script: (tln, script) => (new Subtree).pullSubtree(script)
    }
  ],
  components: (tln) => [],
}